/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Scheduler_H
#define Scheduler_H

#include <TProcessor.h>
#include "scheduler_types.h"



class SchedulerIf {
 public:
  virtual ~SchedulerIf() {}
  virtual int64_t Submit(const TaskInfo& task_info) = 0;
  virtual void Query(TaskInfo& _return, const int64_t task_id) = 0;
  virtual int32_t RemoveTask(const int64_t task_id) = 0;
};

class SchedulerNull : virtual public SchedulerIf {
 public:
  virtual ~SchedulerNull() {}
  int64_t Submit(const TaskInfo& /* task_info */) {
    int64_t _return = 0;
    return _return;
  }
  void Query(TaskInfo& /* _return */, const int64_t /* task_id */) {
    return;
  }
  int32_t RemoveTask(const int64_t /* task_id */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Scheduler_Submit_args__isset {
  _Scheduler_Submit_args__isset() : task_info(false) {}
  bool task_info;
} _Scheduler_Submit_args__isset;

class Scheduler_Submit_args {
 public:

  Scheduler_Submit_args() {
  }

  virtual ~Scheduler_Submit_args() throw() {}

  TaskInfo task_info;

  _Scheduler_Submit_args__isset __isset;

  bool operator == (const Scheduler_Submit_args & rhs) const
  {
    if (!(task_info == rhs.task_info))
      return false;
    return true;
  }
  bool operator != (const Scheduler_Submit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_Submit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Scheduler_Submit_pargs {
 public:


  virtual ~Scheduler_Submit_pargs() throw() {}

  const TaskInfo* task_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_Submit_result__isset {
  _Scheduler_Submit_result__isset() : success(false) {}
  bool success;
} _Scheduler_Submit_result__isset;

class Scheduler_Submit_result {
 public:

  Scheduler_Submit_result() : success(0) {
  }

  virtual ~Scheduler_Submit_result() throw() {}

  int64_t success;

  _Scheduler_Submit_result__isset __isset;

  bool operator == (const Scheduler_Submit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Scheduler_Submit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_Submit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_Submit_presult__isset {
  _Scheduler_Submit_presult__isset() : success(false) {}
  bool success;
} _Scheduler_Submit_presult__isset;

class Scheduler_Submit_presult {
 public:


  virtual ~Scheduler_Submit_presult() throw() {}

  int64_t* success;

  _Scheduler_Submit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Scheduler_Query_args__isset {
  _Scheduler_Query_args__isset() : task_id(false) {}
  bool task_id;
} _Scheduler_Query_args__isset;

class Scheduler_Query_args {
 public:

  Scheduler_Query_args() : task_id(0) {
  }

  virtual ~Scheduler_Query_args() throw() {}

  int64_t task_id;

  _Scheduler_Query_args__isset __isset;

  bool operator == (const Scheduler_Query_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Scheduler_Query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_Query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Scheduler_Query_pargs {
 public:


  virtual ~Scheduler_Query_pargs() throw() {}

  const int64_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_Query_result__isset {
  _Scheduler_Query_result__isset() : success(false) {}
  bool success;
} _Scheduler_Query_result__isset;

class Scheduler_Query_result {
 public:

  Scheduler_Query_result() {
  }

  virtual ~Scheduler_Query_result() throw() {}

  TaskInfo success;

  _Scheduler_Query_result__isset __isset;

  bool operator == (const Scheduler_Query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Scheduler_Query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_Query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_Query_presult__isset {
  _Scheduler_Query_presult__isset() : success(false) {}
  bool success;
} _Scheduler_Query_presult__isset;

class Scheduler_Query_presult {
 public:


  virtual ~Scheduler_Query_presult() throw() {}

  TaskInfo* success;

  _Scheduler_Query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Scheduler_RemoveTask_args__isset {
  _Scheduler_RemoveTask_args__isset() : task_id(false) {}
  bool task_id;
} _Scheduler_RemoveTask_args__isset;

class Scheduler_RemoveTask_args {
 public:

  Scheduler_RemoveTask_args() : task_id(0) {
  }

  virtual ~Scheduler_RemoveTask_args() throw() {}

  int64_t task_id;

  _Scheduler_RemoveTask_args__isset __isset;

  bool operator == (const Scheduler_RemoveTask_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const Scheduler_RemoveTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_RemoveTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Scheduler_RemoveTask_pargs {
 public:


  virtual ~Scheduler_RemoveTask_pargs() throw() {}

  const int64_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_RemoveTask_result__isset {
  _Scheduler_RemoveTask_result__isset() : success(false) {}
  bool success;
} _Scheduler_RemoveTask_result__isset;

class Scheduler_RemoveTask_result {
 public:

  Scheduler_RemoveTask_result() : success(0) {
  }

  virtual ~Scheduler_RemoveTask_result() throw() {}

  int32_t success;

  _Scheduler_RemoveTask_result__isset __isset;

  bool operator == (const Scheduler_RemoveTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Scheduler_RemoveTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Scheduler_RemoveTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Scheduler_RemoveTask_presult__isset {
  _Scheduler_RemoveTask_presult__isset() : success(false) {}
  bool success;
} _Scheduler_RemoveTask_presult__isset;

class Scheduler_RemoveTask_presult {
 public:


  virtual ~Scheduler_RemoveTask_presult() throw() {}

  int32_t* success;

  _Scheduler_RemoveTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SchedulerClient : virtual public SchedulerIf {
 public:
  SchedulerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SchedulerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t Submit(const TaskInfo& task_info);
  void send_Submit(const TaskInfo& task_info);
  int64_t recv_Submit();
  void Query(TaskInfo& _return, const int64_t task_id);
  void send_Query(const int64_t task_id);
  void recv_Query(TaskInfo& _return);
  int32_t RemoveTask(const int64_t task_id);
  void send_RemoveTask(const int64_t task_id);
  int32_t recv_RemoveTask();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SchedulerProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SchedulerIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (SchedulerProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_Submit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SchedulerProcessor(boost::shared_ptr<SchedulerIf> iface) :
    iface_(iface) {
    processMap_["Submit"] = &SchedulerProcessor::process_Submit;
    processMap_["Query"] = &SchedulerProcessor::process_Query;
    processMap_["RemoveTask"] = &SchedulerProcessor::process_RemoveTask;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~SchedulerProcessor() {}
};

class SchedulerMultiface : virtual public SchedulerIf {
 public:
  SchedulerMultiface(std::vector<boost::shared_ptr<SchedulerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SchedulerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SchedulerIf> > ifaces_;
  SchedulerMultiface() {}
  void add(boost::shared_ptr<SchedulerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t Submit(const TaskInfo& task_info) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->Submit(task_info);
      } else {
        ifaces_[i]->Submit(task_info);
      }
    }
  }

  void Query(TaskInfo& _return, const int64_t task_id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Query(_return, task_id);
        return;
      } else {
        ifaces_[i]->Query(_return, task_id);
      }
    }
  }

  int32_t RemoveTask(const int64_t task_id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RemoveTask(task_id);
      } else {
        ifaces_[i]->RemoveTask(task_id);
      }
    }
  }

};



#endif
