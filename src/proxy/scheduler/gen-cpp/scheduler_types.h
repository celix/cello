/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef scheduler_TYPES_H
#define scheduler_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _TaskInfo__isset {
  _TaskInfo__isset() : arguments(false), candidate_ips(false), cpu(false), memory(false) {}
  bool arguments;
  bool candidate_ips;
  bool cpu;
  bool memory;
} _TaskInfo__isset;

class TaskInfo {
 public:

  static const char* ascii_fingerprint; // = "2581CC094302C11CA20AE04D9D1437C6";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x81,0xCC,0x09,0x43,0x02,0xC1,0x1C,0xA2,0x0A,0xE0,0x4D,0x9D,0x14,0x37,0xC6};

  TaskInfo() : framework_name(""), cmd(""), arguments(""), candidate_ips(""), cpu(0), memory(0) {
  }

  virtual ~TaskInfo() throw() {}

  std::string framework_name;
  std::string cmd;
  std::string arguments;
  std::string candidate_ips;
  double cpu;
  double memory;

  _TaskInfo__isset __isset;

  bool operator == (const TaskInfo & rhs) const
  {
    if (!(framework_name == rhs.framework_name))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    if (__isset.arguments != rhs.__isset.arguments)
      return false;
    else if (__isset.arguments && !(arguments == rhs.arguments))
      return false;
    if (__isset.candidate_ips != rhs.__isset.candidate_ips)
      return false;
    else if (__isset.candidate_ips && !(candidate_ips == rhs.candidate_ips))
      return false;
    if (__isset.cpu != rhs.__isset.cpu)
      return false;
    else if (__isset.cpu && !(cpu == rhs.cpu))
      return false;
    if (__isset.memory != rhs.__isset.memory)
      return false;
    else if (__isset.memory && !(memory == rhs.memory))
      return false;
    return true;
  }
  bool operator != (const TaskInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
