/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "scheduler_types.h"



const char* TaskInfo::ascii_fingerprint = "CB4EC85350124CB04BE63BAC46B8B12F";
const uint8_t TaskInfo::binary_fingerprint[16] = {0xCB,0x4E,0xC8,0x53,0x50,0x12,0x4C,0xB0,0x4B,0xE6,0x3B,0xAC,0x46,0xB8,0xB1,0x2F};

uint32_t TaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_framework_name = false;
  bool isset_id = false;
  bool isset_cmd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->framework_name);
          isset_framework_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cmd);
          isset_cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->arguments);
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->candidate_ips);
          this->__isset.candidate_ips = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->need_cpu);
          this->__isset.need_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->need_memory);
          this->__isset.need_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_framework_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cmd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskInfo");
  xfer += oprot->writeFieldBegin("framework_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->framework_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->cmd);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.arguments) {
    xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->arguments);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.candidate_ips) {
    xfer += oprot->writeFieldBegin("candidate_ips", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->candidate_ips);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.need_cpu) {
    xfer += oprot->writeFieldBegin("need_cpu", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->need_cpu);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.need_memory) {
    xfer += oprot->writeFieldBegin("need_memory", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->need_memory);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


