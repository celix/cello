/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef collector_TYPES_H
#define collector_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

/// ADD(@chenjing)
#include <vector>
#include "common/message_queue.h"
#include "common/string_utility.h"
#include "glog/logging.h"

using std::vector;

typedef struct _ExecutorStat__isset {
  _ExecutorStat__isset() : fr_name(false), used_cpu(false), used_memory(false) {}
  bool fr_name;
  bool used_cpu;
  bool used_memory;
} _ExecutorStat__isset;

class ExecutorStat {
 public:

  static const char* ascii_fingerprint; // = "8C845A3AAF3585B0F962B641E472EE17";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x84,0x5A,0x3A,0xAF,0x35,0x85,0xB0,0xF9,0x62,0xB6,0x41,0xE4,0x72,0xEE,0x17};

  static const char seperator = '#';
  ExecutorStat() : fr_name(""), used_cpu(0), used_memory(0) {
  }

  //ADD(@chenjing)
  ExecutorStat(const string& ss);
  ExecutorStat(const string& name, double cpu, int mem): fr_name(name),
                                                         used_cpu(cpu),
                                                         used_memory(mem) {
  }

  virtual ~ExecutorStat() throw() {}

  std::string GetFramework() const {
    return fr_name;
  }

  std::string fr_name;
  double used_cpu;
  int32_t used_memory;

  _ExecutorStat__isset __isset;

  bool operator == (const ExecutorStat & rhs) const
  {
    if (!(fr_name == rhs.fr_name))
      return false;
    if (!(used_cpu == rhs.used_cpu))
      return false;
    if (!(used_memory == rhs.used_memory))
      return false;
    return true;
  }
  bool operator != (const ExecutorStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecutorStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  //ADD(@chenjing)
  string ToString() const;
};

typedef struct _MachineInfo__isset {
  _MachineInfo__isset() : endpoint(false), usage(false), cpu(false), memory(false), avail_cpu(false), avail_memory(false), executor_list(false) {}
  bool endpoint;
  bool usage;
  bool cpu;
  bool memory;
  bool avail_cpu;
  bool avail_memory;
  bool executor_list;
} _MachineInfo__isset;

class MachineInfo {
 public:

  static const char* ascii_fingerprint; // = "C7CB1954092B2778E02081E2D47F8BA4";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xCB,0x19,0x54,0x09,0x2B,0x27,0x78,0xE0,0x20,0x81,0xE2,0xD4,0x7F,0x8B,0xA4};
  static const char seperator = '\n';

  MachineInfo() : endpoint(""), usage(0), cpu(0), memory(0), avail_cpu(0), avail_memory(0) {
  }
  /// ADD(@chenjing)
  MachineInfo(const MessageQueue::Message& msg);
  
  MessageQueue::Message ToMessage();
  
  /// MODIFY(@chenjing)
  //virtual ~MachineInfo() throw() {}
  virtual ~MachineInfo() {}

  std::string endpoint;
  double usage;
  int32_t cpu;
  int32_t memory;
  double avail_cpu;
  int32_t avail_memory;
  std::vector<ExecutorStat>  executor_list;

  _MachineInfo__isset __isset;

  bool operator == (const MachineInfo & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(usage == rhs.usage))
      return false;
    if (!(cpu == rhs.cpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(avail_cpu == rhs.avail_cpu))
      return false;
    if (!(avail_memory == rhs.avail_memory))
      return false;
    if (!(executor_list == rhs.executor_list))
      return false;
    return true;
  }
  bool operator != (const MachineInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MachineInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
