/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef collector_TYPES_H
#define collector_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>


/// ADD(@chenjing)
#include <vector>
#include "common/message_queue.h"
#include "common/string_utility.h"
#include "glog/logging.h"

using std::vector;
using cello::MessageQueue;



typedef struct _ExecutorStat__isset {
  _ExecutorStat__isset() : fr_name(false), used_cpu(false), used_memory(false), task_num(false) {}
  bool fr_name;
  bool used_cpu;
  bool used_memory;
  bool task_num;
} _ExecutorStat__isset;

class ExecutorStat {
 public:

  static const char* ascii_fingerprint; // = "291C6B3CAF59A17F97EAA92611E1087F";
  static const uint8_t binary_fingerprint[16]; // = {0x29,0x1C,0x6B,0x3C,0xAF,0x59,0xA1,0x7F,0x97,0xEA,0xA9,0x26,0x11,0xE1,0x08,0x7F};

  ExecutorStat() : fr_name(""), used_cpu(0), used_memory(0), task_num(0) {
  }

  virtual ~ExecutorStat() throw() {}

  std::string fr_name;
  double used_cpu;
  int32_t used_memory;
  int32_t task_num;
  static const char seperator = '#';

  _ExecutorStat__isset __isset;
  
  string GetFramework() {
    return fr_name;
  }

  bool operator == (const ExecutorStat & rhs) const
  {
    if (!(fr_name == rhs.fr_name))
      return false;
    if (!(used_cpu == rhs.used_cpu))
      return false;
    if (!(used_memory == rhs.used_memory))
      return false;
    if (!(task_num == rhs.task_num))
      return false;
    return true;
  }
  bool operator != (const ExecutorStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecutorStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  //ADD(@chenjing)
  ExecutorStat(const string& ss);
  ExecutorStat(const string& name, double cpu, int mem, int num):
      fr_name(name),
      used_cpu(cpu),
      used_memory(mem),
      task_num(num) {
  }
 
  string ToString() const;

};

typedef struct _MachineInfo__isset {
  _MachineInfo__isset() : endpoint(false), usage(false), cpu(false), memory(false), avail_cpu(false), avail_memory(false), executor_list(false) {}
  bool endpoint;
  bool usage;
  bool cpu;
  bool memory;
  bool avail_cpu;
  bool avail_memory;
  bool executor_list;
} _MachineInfo__isset;

class MachineInfo {
 public:

  static const char* ascii_fingerprint; // = "F43C5DDE19A104B0F53A8E63C8DA74BB";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x3C,0x5D,0xDE,0x19,0xA1,0x04,0xB0,0xF5,0x3A,0x8E,0x63,0xC8,0xDA,0x74,0xBB};

  static const char seperator = '\n';

  MachineInfo() : endpoint(""), usage(0), cpu(0), memory(0), avail_cpu(0), avail_memory(0) {
  }

  /// ADD(@chenjing)
  MachineInfo(const MessageQueue::Message& msg);
  
  MessageQueue::Message ToMessage();
  
  /// MODIFY(@chenjing)
  //virtual ~MachineInfo() throw() {}
  virtual ~MachineInfo() {}

  std::string endpoint;
  double usage;
  int32_t cpu;
  int32_t memory;
  double avail_cpu;
  int32_t avail_memory;
  std::vector<ExecutorStat>  executor_list;

  _MachineInfo__isset __isset;

  bool operator == (const MachineInfo & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(usage == rhs.usage))
      return false;
    if (!(cpu == rhs.cpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(avail_cpu == rhs.avail_cpu))
      return false;
    if (!(avail_memory == rhs.avail_memory))
      return false;
    if (!(executor_list == rhs.executor_list))
      return false;
    return true;
  }
  bool operator != (const MachineInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MachineInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
