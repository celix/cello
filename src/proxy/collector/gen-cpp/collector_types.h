/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef collector_TYPES_H
#define collector_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

/// ADD BY @chenjing
#include <vector>
#include "common/message_queue.h"
#include "common/string_utility.h"
#include "glog/logging.h"




typedef struct _MachineInfo__isset {
  _MachineInfo__isset() : endpoint(false), usage(false), cpu(false), memory(false), avail_cpu(false), avail_memory(false), task_num(false) {}
  bool endpoint;
  bool usage;
  bool cpu;
  bool memory;
  bool avail_cpu;
  bool avail_memory;
  bool task_num;
} _MachineInfo__isset;

class MachineInfo {
 public:

  static const char* ascii_fingerprint; // = "7A7F0F0A88E5B0DCF813F7BF09408C4C";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x7F,0x0F,0x0A,0x88,0xE5,0xB0,0xDC,0xF8,0x13,0xF7,0xBF,0x09,0x40,0x8C,0x4C};

  MachineInfo() : endpoint(""), usage(0), cpu(0), memory(0), avail_cpu(0), avail_memory(0), task_num(0) {
  }

  /// ADD BY @chenjing
  MachineInfo(const MessageQueue::Message& msg) {
    vector<string> res;
    StringUtility::Split(msg.Get(), '\n', &res);
    endpoint = res[0];
    usage = atof(res[1].c_str());
    cpu = atoi(res[2].c_str());
    memory = atoi(res[3].c_str());
    avail_cpu = atof(res[4].c_str());
    avail_memory = atoi(res[5].c_str());
  }
  
  /// MODIFY BY @chenjing
  //virtual ~MachineInfo() throw() {}
  virtual ~MachineInfo() {}

  std::string endpoint;
  double usage;
  int32_t cpu;
  int32_t memory;
  double avail_cpu;
  int32_t avail_memory;
  int32_t task_num;

  _MachineInfo__isset __isset;

  bool operator == (const MachineInfo & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(usage == rhs.usage))
      return false;
    if (!(cpu == rhs.cpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(avail_cpu == rhs.avail_cpu))
      return false;
    if (!(avail_memory == rhs.avail_memory))
      return false;
    if (!(task_num == rhs.task_num))
      return false;
    return true;
  }
  bool operator != (const MachineInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MachineInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
