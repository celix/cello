/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "collector_types.h"



const char* ExecutorStat::ascii_fingerprint = "291C6B3CAF59A17F97EAA92611E1087F";
const uint8_t ExecutorStat::binary_fingerprint[16] = {0x29,0x1C,0x6B,0x3C,0xAF,0x59,0xA1,0x7F,0x97,0xEA,0xA9,0x26,0x11,0xE1,0x08,0x7F};

uint32_t ExecutorStat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fr_name);
          this->__isset.fr_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->used_cpu);
          this->__isset.used_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->used_memory);
          this->__isset.used_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_num);
          this->__isset.task_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecutorStat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecutorStat");
  xfer += oprot->writeFieldBegin("fr_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fr_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("used_cpu", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->used_cpu);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("used_memory", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->used_memory);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("task_num", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->task_num);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MachineInfo::ascii_fingerprint = "F43C5DDE19A104B0F53A8E63C8DA74BB";
const uint8_t MachineInfo::binary_fingerprint[16] = {0xF4,0x3C,0x5D,0xDE,0x19,0xA1,0x04,0xB0,0xF5,0x3A,0x8E,0x63,0xC8,0xDA,0x74,0xBB};

uint32_t MachineInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endpoint);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->usage);
          this->__isset.usage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cpu);
          this->__isset.cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->avail_cpu);
          this->__isset.avail_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->avail_memory);
          this->__isset.avail_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->executor_list.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->executor_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->executor_list[_i4].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.executor_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MachineInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MachineInfo");
  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->endpoint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("usage", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->usage);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cpu", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->cpu);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("avail_cpu", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->avail_cpu);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("avail_memory", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->avail_memory);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("executor_list", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->executor_list.size());
    std::vector<ExecutorStat> ::const_iterator _iter5;
    for (_iter5 = this->executor_list.begin(); _iter5 != this->executor_list.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

//ADD BY @chenjing
ExecutorStat::ExecutorStat(const string& ss) {
    vector<string> res;
    StringUtility::Split(ss, seperator, &res);
    fr_name = res[0];
    used_cpu = atof(res[1].c_str());
    used_memory = atoi(res[2].c_str());
    task_num = atoi(res[3].c_str());
}

string ExecutorStat::ToString() const {
    char data[256] = {0};
    snprintf(data, sizeof(data), "%s%c%f%c%d%c%d", fr_name.c_str(), seperator,
             used_cpu, seperator, used_memory, seperator, task_num);
    return data;
}

MachineInfo::MachineInfo(const MessageQueue::Message& msg) {
    vector<string> res;
    StringUtility::Split(msg.Get(), seperator, &res);
    endpoint = res[0];
    usage = atof(res[1].c_str());
    cpu = atoi(res[2].c_str());
    memory = atoi(res[3].c_str());
    avail_cpu = atof(res[4].c_str());
    avail_memory = atoi(res[5].c_str());
    // executor stat information
    if (res.size() > 6) {
        vector<string> vs;
        StringUtility::Split(res[6], '$', &vs);
        for (vector<string>::iterator it = vs.begin(); it != vs.end(); ++it)
            executor_list.push_back(*it);
    }
}

MessageQueue::Message MachineInfo::ToMessage() {
    string ss;
    for (vector<ExecutorStat>::iterator it = executor_list.begin();
         it != executor_list.end(); ++it)
        ss += it->ToString() + '$';
    char data[1024] = {0};
    snprintf(data, sizeof(data), "%s%c%f%c%d%c%d%c%f%c%d%c%s", endpoint.c_str(),
             seperator, usage, seperator, cpu, seperator, memory, seperator,
             avail_cpu, seperator, avail_memory, seperator, ss.c_str());
    return data;   
}
