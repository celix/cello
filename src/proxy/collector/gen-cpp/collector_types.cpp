/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "collector_types.h"



const char* MachineInfo::ascii_fingerprint = "E42E0C004BE60620A39AF9F925B574C3";
const uint8_t MachineInfo::binary_fingerprint[16] = {0xE4,0x2E,0x0C,0x00,0x4B,0xE6,0x06,0x20,0xA3,0x9A,0xF9,0xF9,0x25,0xB5,0x74,0xC3};

uint32_t MachineInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_endpoint = false;
  bool isset_load = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endpoint);
          isset_endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->load);
          isset_load = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cpu);
          this->__isset.cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->avail_cpu);
          this->__isset.avail_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->avail_memory);
          this->__isset.avail_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->task_num);
          this->__isset.task_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_endpoint)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_load)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MachineInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MachineInfo");
  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->endpoint);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("load", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->load);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.cpu) {
    xfer += oprot->writeFieldBegin("cpu", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->cpu);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.memory) {
    xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->memory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.avail_cpu) {
    xfer += oprot->writeFieldBegin("avail_cpu", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->avail_cpu);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.avail_memory) {
    xfer += oprot->writeFieldBegin("avail_memory", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->avail_memory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.task_num) {
    xfer += oprot->writeFieldBegin("task_num", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->task_num);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


