/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "scheduler_types.h"



const char* TaskInfo::ascii_fingerprint = "B7D24A3FEB0B14FB144E550AA4AE55B6";
const uint8_t TaskInfo::binary_fingerprint[16] = {0xB7,0xD2,0x4A,0x3F,0xEB,0x0B,0x14,0xFB,0x14,0x4E,0x55,0x0A,0xA4,0xAE,0x55,0xB6};

uint32_t TaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->framework_name);
          this->__isset.framework_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cmd);
          this->__isset.cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->arguments);
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->candidate_ips);
          this->__isset.candidate_ips = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->need_cpu);
          this->__isset.need_cpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->need_memory);
          this->__isset.need_memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskInfo");
  xfer += oprot->writeFieldBegin("framework_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->framework_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cmd", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->cmd);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->arguments);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("candidate_ips", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->candidate_ips);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("need_cpu", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->need_cpu);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("need_memory", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->need_memory);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


