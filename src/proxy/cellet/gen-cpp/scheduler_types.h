/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef scheduler_TYPES_H
#define scheduler_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _TaskInfo__isset {
  _TaskInfo__isset() : framework_name(false), id(false), cmd(false), arguments(false), candidate_ips(false), need_cpu(false), need_memory(false) {}
  bool framework_name;
  bool id;
  bool cmd;
  bool arguments;
  bool candidate_ips;
  bool need_cpu;
  bool need_memory;
} _TaskInfo__isset;

class TaskInfo {
 public:

  static const char* ascii_fingerprint; // = "B7D24A3FEB0B14FB144E550AA4AE55B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xD2,0x4A,0x3F,0xEB,0x0B,0x14,0xFB,0x14,0x4E,0x55,0x0A,0xA4,0xAE,0x55,0xB6};

  TaskInfo() : framework_name(""), id(0), cmd(""), arguments(""), candidate_ips(""), need_cpu(0), need_memory(0) {
  }

  virtual ~TaskInfo() throw() {}

  std::string framework_name;
  int64_t id;
  std::string cmd;
  std::string arguments;
  std::string candidate_ips;
  double need_cpu;
  int32_t need_memory;

  _TaskInfo__isset __isset;

  bool operator == (const TaskInfo & rhs) const
  {
    if (!(framework_name == rhs.framework_name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    if (!(candidate_ips == rhs.candidate_ips))
      return false;
    if (!(need_cpu == rhs.need_cpu))
      return false;
    if (!(need_memory == rhs.need_memory))
      return false;
    return true;
  }
  bool operator != (const TaskInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
