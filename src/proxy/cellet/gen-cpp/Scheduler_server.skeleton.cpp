// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Scheduler.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class SchedulerHandler : virtual public SchedulerIf {
 public:
  SchedulerHandler() {
    // Your initialization goes here
  }

  int64_t Submit(const TaskInfo& task_info) {
    // Your implementation goes here
    printf("Submit\n");
  }

  void Query(TaskInfo& _return, const int64_t task_id) {
    // Your implementation goes here
    printf("Query\n");
  }

  int32_t RemoveTask(const int64_t task_id) {
    // Your implementation goes here
    printf("RemoveTask\n");
  }

  int32_t TaskStarted(const int64_t task_id, const bool status) {
    // Your implementation goes here
    printf("TaskStarted\n");
  }

  int32_t TaskFinished(const int64_t task_id, const bool status) {
    // Your implementation goes here
    printf("TaskFinished\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SchedulerHandler> handler(new SchedulerHandler());
  shared_ptr<TProcessor> processor(new SchedulerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

