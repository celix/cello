!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddEvent	framework.cpp	/^void Framework::AddEvent(const MachinePtr& machine) {$/;"	f	class:Framework
AddEvent	monitor.cpp	/^void Monitor::AddEvent(const MachinePtr& machine) {$/;"	f	class:Monitor
Collector	collector.h	/^class Collector : public CollectorIf {$/;"	c
CpuTrigger	trigger.h	/^    CpuTrigger() : Trigger(s_period, s_value) {}$/;"	f	class:CpuTrigger
CpuTrigger	trigger.h	/^class CpuTrigger : public Trigger {$/;"	c
Delete	framework_pool.cpp	/^void FrameworkPool::Delete(const string& name) {$/;"	f	class:FrameworkPool
Delete	machine_pool.cpp	/^void MachinePool::Delete(const string& endpoint) {$/;"	f	class:MachinePool
Entry	framework.cpp	/^void Framework::Entry() {$/;"	f	class:Framework
Entry	monitor.cpp	/^void Monitor::Entry() {$/;"	f	class:Monitor
Filter	filter.h	/^class Filter {$/;"	c
Filtration	filter.h	/^    static void Filtration(const MachinePtr& machine,$/;"	f	class:Filter
FindToDo	framework_pool.cpp	/^void FrameworkPool::FindToDo(const string& name, FrameworkFunc func) {$/;"	f	class:FrameworkPool
ForwardEvent	monitor.cpp	/^void Monitor::ForwardEvent(const MachinePtr& machine) {$/;"	f	class:Monitor
Framework	framework.h	/^    explicit Framework(const string& name): m_name(name) {}  $/;"	f	class:Framework
Framework	framework.h	/^class Framework {$/;"	c
FrameworkExist	machine.cpp	/^bool Machine::FrameworkExist(const ClassAd* ptr) {$/;"	f	class:Machine
FrameworkFunc	framework_pool.h	/^    typedef function<void(FrameworkPtr ptr)> FrameworkFunc;$/;"	t	class:FrameworkPool
FrameworkPool	framework_pool.h	/^class FrameworkPool {$/;"	c
GetClassAd	machine.h	/^    ClassAd GetClassAd() const {$/;"	f	class:Machine
GetEndpoint	machine.h	/^    string GetEndpoint() const {$/;"	f	class:Machine
GetMachine	rank_machine.h	/^    Machine* GetMachine() const {$/;"	f	struct:RankMachine
GetName	framework.h	/^    string GetName() const {$/;"	f	class:Framework
GetRankValue	rank_machine.h	/^    double GetRankValue() const {$/;"	f	struct:RankMachine
Heartbeat	collector.h	/^    void Heartbeat(const MachineInfo& info) {$/;"	f	class:Collector
Insert	framework_pool.cpp	/^void FrameworkPool::Insert(const FrameworkPtr& ptr) {$/;"	f	class:FrameworkPool
Insert	machine_pool.cpp	/^void MachinePool::Insert(const MachinePtr& machine) {$/;"	f	class:MachinePool
IsMatch	machine.cpp	/^bool Machine::IsMatch(ClassAd* ptr, RankMachine* rank_ptr) {$/;"	f	class:Machine
LogInfo	machine.cpp	/^void Machine::LogInfo() const {$/;"	f	class:Machine
Machine	machine.cpp	/^Machine::Machine(const MachineInfo& info) : MachineInfo(info) {$/;"	f	class:Machine
Machine	machine.h	/^class Machine : public MachineInfo {$/;"	c
MachineCompare	filter.h	/^    static bool MachineCompare(const RankMachine& first,$/;"	f	class:Filter
MachineFunc	machine_pool.h	/^    typedef function<void(const MachinePtr&)> MachineFunc;$/;"	t	class:MachinePool
MachinePool	machine_pool.h	/^class MachinePool {$/;"	c
MachinePtr	machine.h	/^typedef shared_ptr<Machine> MachinePtr;$/;"	t
MapToDo	machine_pool.cpp	/^void MachinePool::MapToDo(MachineFunc func) {$/;"	f	class:MachinePool
Match	collector.h	/^    void Match(string& result, const string& str_ad) {$/;"	f	class:Collector
MemoryTrigger	trigger.h	/^    MemoryTrigger(int value, int period) : Trigger(value, period) {}$/;"	f	class:MemoryTrigger
MemoryTrigger	trigger.h	/^class MemoryTrigger : public Trigger {$/;"	c
Monitor	monitor.h	/^class Monitor {$/;"	c
MonitorMgr	monitor.h	/^typedef Singleton<Monitor> MonitorMgr;$/;"	t
Pool	machine_pool.h	/^typedef Singleton<MachinePool> Pool;$/;"	t
RankMachine	rank_machine.h	/^    RankMachine() : m_ptr(0), m_rank_value(0.0) {}$/;"	f	struct:RankMachine
RankMachine	rank_machine.h	/^struct RankMachine {$/;"	s
SRC_COLLECTOR_COLLECOTR_H	collector.h	2;"	d
SRC_COLLECTOR_FILTER_H	filter.h	2;"	d
SRC_COLLECTOR_FRAMEWORK_H	framework.h	2;"	d
SRC_COLLECTOR_FRAMEWORK_POOL_H	framework_pool.h	2;"	d
SRC_COLLECTOR_MACHINE_H	machine.h	2;"	d
SRC_COLLECTOR_MACHINE_POOL_H	machine_pool.h	2;"	d
SRC_COLLECTOR_MONITOR_H	monitor.h	2;"	d
SRC_COLLECTOR_RANK_MACHINE_H	rank_machine.h	2;"	d
SRC_COLLECTOR_TRIGGER_H	trigger.h	2;"	d
SetMachine	rank_machine.h	/^    void SetMachine(Machine* ptr) {$/;"	f	struct:RankMachine
SetRankValue	rank_machine.h	/^    void SetRankValue(double value) {$/;"	f	struct:RankMachine
SetValue	trigger.h	/^    void SetValue(int value) const {$/;"	f	class:Trigger
Setperiod	trigger.h	/^    void Setperiod(int period) const {$/;"	f	class:Trigger
Size	machine_pool.cpp	/^int MachinePool::Size() {$/;"	f	class:MachinePool
SlotTrigger	trigger.h	/^class SlotTrigger : public Trigger {$/;"	c
Start	framework.cpp	/^void Framework::Start() {$/;"	f	class:Framework
Start	monitor.cpp	/^void Monitor::Start() {$/;"	f	class:Monitor
Trigger	trigger.h	/^    Trigger() : m_value_threshold(0), m_period_threshold(0) {}$/;"	f	class:Trigger
Trigger	trigger.h	/^    Trigger(int value, int period) : m_value_threshold(value),$/;"	f	class:Trigger
Trigger	trigger.h	/^class Trigger {$/;"	c
TriggerPtr	trigger.h	/^typedef shared_ptr<Trigger> TriggerPtr;$/;"	t
m_ad	machine.h	/^    ClassAd m_ad;$/;"	m	class:Machine
m_executor_pool	framework.h	/^    MachinePool m_executor_pool;                     \/\/\/ executor pool$/;"	m	class:Framework
m_framework_pool	monitor.h	/^    map<string, Framework*> m_framework_pool;$/;"	m	class:Monitor
m_lock	machine_pool.h	/^    RWLock m_lock;$/;"	m	class:MachinePool
m_map	framework_pool.h	/^    map<string, FramworkPtr> m_map;$/;"	m	class:FrameworkPool
m_monitor_thread	monitor.h	/^    Thread m_monitor_thread;$/;"	m	class:Monitor
m_name	framework.h	/^    string m_name;$/;"	m	class:Framework
m_period_threshold	trigger.h	/^    int m_period_threshold;     \/\/\/ period threshold$/;"	m	class:Trigger
m_pool	machine_pool.h	/^    map<string, MachinePtr> m_pool;$/;"	m	class:MachinePool
m_ptr	rank_machine.h	/^    Machine* m_ptr;$/;"	m	struct:RankMachine
m_queue	framework.h	/^    BlockQueue<MachinePtr> m_queue;                  \/\/\/ inforamtion queue$/;"	m	class:Framework
m_queue	monitor.h	/^    BlockQueue<MachinePtr> m_queue;$/;"	m	class:Monitor
m_rank_value	rank_machine.h	/^    double m_rank_value;$/;"	m	struct:RankMachine
m_thread	framework.h	/^    Thread m_thread;                                 \/\/\/ work thread$/;"	m	class:Framework
m_trigger_list	framework.h	/^    list<TriggerPtr> m_trigger_list;                    \/\/\/ trigger list$/;"	m	class:Framework
m_value_threshold	trigger.h	/^    int m_value_threshold;    \/\/\/ value threshold$/;"	m	class:Trigger
main	cellet_mock.cpp	/^int main() {$/;"	f
main	main.cpp	/^int main(int argc, char ** argv) {$/;"	f
s_period	trigger.h	/^    static const int s_period = 5; \/\/\/ In minutes$/;"	m	class:CpuTrigger
s_value	trigger.h	/^    static const int s_value = 10; \/\/\/ In percent    $/;"	m	class:CpuTrigger
~Trigger	trigger.h	/^    virtual ~Trigger() {}$/;"	f	class:Trigger
