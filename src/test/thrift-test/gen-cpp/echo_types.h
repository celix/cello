/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef echo_TYPES_H
#define echo_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _Info__isset {
  _Info__isset() : id(false), name(false), size(false) {}
  bool id;
  bool name;
  bool size;
} _Info__isset;

class Info {
 public:

  static const char* ascii_fingerprint; // = "FA14FF3C297F6EBE2FC46FD846FF0E76";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};

  Info() : id(0), name(""), size(0) {
  }

  virtual ~Info() throw() {}

  int64_t id;
  std::string name;
  int32_t size;

  _Info__isset __isset;

  bool operator == (const Info & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const Info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
