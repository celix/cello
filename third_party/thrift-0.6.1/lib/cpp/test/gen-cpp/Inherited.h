/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Inherited_H
#define Inherited_H

#include <TProcessor.h>
#include "DebugProtoTest_types.h"
#include "Srv.h"

namespace thrift { namespace test { namespace debug {

class InheritedIf : virtual public SrvIf {
 public:
  virtual ~InheritedIf() {}
  virtual int32_t identity(const int32_t arg) = 0;
};

class InheritedNull : virtual public InheritedIf , virtual public SrvNull {
 public:
  virtual ~InheritedNull() {}
  int32_t identity(const int32_t /* arg */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Inherited_identity_args__isset {
  _Inherited_identity_args__isset() : arg(false) {}
  bool arg;
} _Inherited_identity_args__isset;

class Inherited_identity_args {
 public:

  Inherited_identity_args() : arg(0) {
  }

  virtual ~Inherited_identity_args() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t arg;

  _Inherited_identity_args__isset __isset;

  bool operator == (const Inherited_identity_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Inherited_identity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Inherited_identity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Inherited_identity_pargs {
 public:


  virtual ~Inherited_identity_pargs() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  const int32_t* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Inherited_identity_result__isset {
  _Inherited_identity_result__isset() : success(false) {}
  bool success;
} _Inherited_identity_result__isset;

class Inherited_identity_result {
 public:

  Inherited_identity_result() : success(0) {
  }

  virtual ~Inherited_identity_result() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t success;

  _Inherited_identity_result__isset __isset;

  bool operator == (const Inherited_identity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Inherited_identity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Inherited_identity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Inherited_identity_presult__isset {
  _Inherited_identity_presult__isset() : success(false) {}
  bool success;
} _Inherited_identity_presult__isset;

class Inherited_identity_presult {
 public:


  virtual ~Inherited_identity_presult() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t* success;

  _Inherited_identity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InheritedClient : virtual public InheritedIf, public SrvClient {
 public:
  InheritedClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    SrvClient(prot, prot) {}
  InheritedClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    SrvClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t identity(const int32_t arg);
  void send_identity(const int32_t arg);
  int32_t recv_identity();
};

class InheritedProcessor : virtual public ::apache::thrift::TProcessor, public SrvProcessor {
 protected:
  boost::shared_ptr<InheritedIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (InheritedProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_identity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InheritedProcessor(boost::shared_ptr<InheritedIf> iface) :
    SrvProcessor(iface),
    iface_(iface) {
    processMap_["identity"] = &InheritedProcessor::process_identity;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~InheritedProcessor() {}
};

class InheritedMultiface : virtual public InheritedIf, public SrvMultiface {
 public:
  InheritedMultiface(std::vector<boost::shared_ptr<InheritedIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<InheritedIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      SrvMultiface::add(*iter);
    }
  }
  virtual ~InheritedMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InheritedIf> > ifaces_;
  InheritedMultiface() {}
  void add(boost::shared_ptr<InheritedIf> iface) {
    SrvMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  int32_t identity(const int32_t arg) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->identity(arg);
      } else {
        ifaces_[i]->identity(arg);
      }
    }
  }

};

}}} // namespace

#endif
