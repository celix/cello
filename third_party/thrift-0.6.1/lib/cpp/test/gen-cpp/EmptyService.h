/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef EmptyService_H
#define EmptyService_H

#include <TProcessor.h>
#include "DebugProtoTest_types.h"

namespace thrift { namespace test { namespace debug {

class EmptyServiceIf {
 public:
  virtual ~EmptyServiceIf() {}
};

class EmptyServiceNull : virtual public EmptyServiceIf {
 public:
  virtual ~EmptyServiceNull() {}
};

class EmptyServiceClient : virtual public EmptyServiceIf {
 public:
  EmptyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  EmptyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EmptyServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<EmptyServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (EmptyServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
 public:
  EmptyServiceProcessor(boost::shared_ptr<EmptyServiceIf> iface) :
    iface_(iface) {
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~EmptyServiceProcessor() {}
};

class EmptyServiceMultiface : virtual public EmptyServiceIf {
 public:
  EmptyServiceMultiface(std::vector<boost::shared_ptr<EmptyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EmptyServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EmptyServiceIf> > ifaces_;
  EmptyServiceMultiface() {}
  void add(boost::shared_ptr<EmptyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
};

}}} // namespace

#endif
